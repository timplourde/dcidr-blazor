@page "/archive"
@using Dcidr.Model.Serialization

@inject DcidrAppModel AppModel
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

    <div class="fade-in">
        <h1>Archive</h1>

        <p>These decisions are saved on your device.</p>

        @if (!isLoading)
        {
            @if (showList)
            {
                <ul class="decision-item-list">
                    @foreach (var d in decisionArchive!.Decisions)
                    {
                        <ArchiveItem @key="@d.Id"
                                     Item="@d"
                                     OnDelete="DeleteDecisionAsync"
                                     OnLoad="LoadDecisionAsync"></ArchiveItem>
                    }
                </ul>

            }
            else
            {
                <em>No decisions found.</em>
            }
        }
        else
        {
            <em>Loading...</em>
        }

        <hr />

        <a class="d-btn" href=""><img src="images/home.svg" /> Home</a>
    </div>


@code {

    private bool isLoading;
    private bool showList;
    private DecisionArchive? decisionArchive;

    private async Task Refresh()
    {
        isLoading = true;
        decisionArchive = await localStorage.GetItemAsync<DecisionArchive>("decision-archive") ?? new DecisionArchive();
        showList = decisionArchive.Decisions.Any();
        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task DeleteDecisionAsync(DecisionArchiveItem decisionArchiveItem)
    {
        await localStorage.RemoveItemAsync($"decision-{decisionArchiveItem.Id}");

        await localStorage.GetItemAsync<DecisionArchive>("decision-archive");
        decisionArchive!.Remove(decisionArchiveItem);
        await localStorage.SetItemAsync("decision-archive", decisionArchive);
        
        await Refresh();
    }

    private async Task LoadDecisionAsync(DecisionArchiveItem decisionArchiveItem)
    {
        var sd = await localStorage.GetItemAsync<SerializedDecision>($"decision-{decisionArchiveItem.Id}");
        if (sd == null)
        {
            System.Diagnostics.Debug.Fail($"Decision {decisionArchiveItem.Id} was not found in local storage");
        }
        else
        {
            try
            {
                AppModel.Decision = Decision.Deserialize(sd);
                NavigationManager.NavigateTo("options");
            }
            catch(Exception e)
            {
                System.Diagnostics.Debug.Fail("Cound not deserialize decision", e.Message);
            }
        }
    }
}